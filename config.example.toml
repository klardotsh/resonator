# Authorization is currently a *very* simple system, and future plans of
# robustness haven't been written. The overall flow is that a user sends their
# user ID and password to an endpoint that returns a
# [JWT](https://en.wikipedia.org/wiki/JSON_Web_Token), which is then sent to
# each future request in the Authorization header.
[auth]
# A private secret used to encrypt auth tokens. This option can be useful if
# running resonator in a cluster where all nodes need to use the same secret to
# ensure sessions are portable. For single-node deployments, it's reasonably
# sane to not provide this option at all, and allow a random value to be
# generated.
#
# For security reasons, the value shown below, and indeed any value including
# the string "resonator" (case-insensitive), will cause a failure on startup.
#
# secret = "WelcomeToResonator"

# How long, in milliseconds, an auth token should be valid for.
#
# default: 604_800_000, seven full days
token-expiry-milliseconds = 604_800_000

[clients]
# Enable/disable downloading the raw source file to a client. No transcoding
# will be applied, and thus, if the source collection is lossless, this could be
# bandwidth-intensive.
#
# default: false
allow-source-download = false

# Wholesale enable/disable lossless codecs, including APE, FLAC, and WAV, which
# can be extremely bandwidth-intensive.
#
# default: false
allow-lossless = false

# Wholesale enable/disable lossy codecs, including AAC, MP3, and Vorbis. ONLY
# DISABLE THIS IF YOU KNOW WHAT YOU'RE DOING as clients are likely to almost
# always request lossy formats by default to save bandwidth (and at that, are
# extremely likely to disallow any lossless codecs).
#
# default: true
allow-lossy = true

# Given a source file that is, say, Vorbis CBR-320, should we allow the client
# to request it be transcoded to, say, MP3-320, at all?
#
# In this example, the ultimately-resultant behavior is dependent on the
# accepted encodings of the client: if the client will accept the source
# encoding and bitrate, pass it through without a re-encode (much as is done
# with Cached Transcodes). If they won't, ERR_ACCEPTED_FORMATS_MISMATCH will be
# sent instead of the track.
#
# In general, applying a lossy encoding to an already-lossy source is asking for
# trouble, but if the source bitrate is high enough, the resultant encoding may
# still be of high enough quality for casual listening (think phones, car
# stereos, etc.). If the lossy sources are known to be the original lossy
# encoding (that is, for example, MyFile.ogg was generated by running
# MyFile.flac through a Vorbis encoder) and are of high enough bitrate to
# satisfy "allow-transcoding-lossy-sources-min-bitrate-kbps", this is probably
# safe to turn on. For lossy libraries that may have already been down-converted
# from another lossy format, or are of low bitrates (a decent rule of thumb is
# to never re-encode MP3s below 256kbps, for example), it's probably safest to
# turn this off.
#
# This is the global setting; it can optionally be overridden per-collection
# below.
#
# default: false
allow-transcoding-lossy-sources = false

# See documentation for "clients.allow-transcoding-lossy-sources" above.
#
# default: 256
allow-transcoding-lossy-sources-min-bitrate-kbps = 256

# The maximum bitrate a client is allowed to request (behavior when requesting
# excess is defined with "max-bitrate-exceeded-request-behavior" and
# "max-bitrate-exceeded-inadvertent-behavior"), regardless of codec.  For
# example, setting this to 320 would allow a maximum of 320kbps per transmitted
# file, which is a common bitrate for very-high-quality MP3s, but may be too low
# for some very-high-quality Vorbis files.
#
# default: 320
max-bitrate-kbps = 320

# When "max-bitrate-kbps" is exceeded in a session request (eg. a client is
# requesting MP3 320, but the server allows a max of MP3 192), which strategy
# should the server use to respond? Options (all strings) include:
#
# - "lower-bitrate-with-notice": given the example request, respond with a
# partial success to the session request, attaching a notice that we're
# degrading to MP3-192 due to server configuration.  The client application is
# free to handle these notices as they see fit, if it handles them at all.
#
# - "fatal": given the example request, fail the entire session request
#
# default: "lower-bitrate-with-notice"
max-bitrate-exceeded-request-behavior = "lower-bitrate-with-notice"

# Sometimes, particularly with VBR codecs, it's possible to spike over
# max-bitrate-kbps through no fault of the client. Options (all strings)
# include:
#
# - "log-warning-and-move-on": exactly what it says on the tin
#
# - "fatal": immediately cut the feed, send an error (but no apology) to the
# client, and continue to the next track in the session queue, if applicable
#
# "fatal" should be used with care and only in cases where there's a hard limit
# on uplink bandwidth that absolutely must not be exceeded - the user experience
# here is terrible.  "log-warning-and-move-on" is very strongly recommended; use
# those as a notification to turn down your VBR settings if you really care.
#
# default: "log-warning-and-move-on"
max-bitrate-exceeded-inadvertent-behavior = "log-warning-and-move-on"

# [[collections]] - a list of tables, each defining a collection of source files
# Do not confuse with [library]. To define multiple collections, standard TOML
# syntax applies: add another [[collections]] table.

#[[collections]]
## Any string, unique across all collections, to identify this collection by
#name = "lossless"
## The path, using whatever your platform's native delimiters are, to the root of
## this collection
#directory = "/data/music"
## Whether to follow symlinks that resolve outside of "directory". Sometimes used
## to merge a lossless collection with a lossy collection to make other tools
## happy.
##
## default: false
#follow-symlinks-external = false
## Whether to follow symlinks that resolve under "directory". This is almost
## always a bad idea that will lead to duplicate library entries - for resource
## conservation reasons, the global library is not currently deduped.
##
## default: false
#follow-symlinks-internal = false
## Whether to watch this collection for changes. In general, most operating
## systems have some way of handling this, but the same cannot be said for all
## file systems, particularly networked and/or virtual (ex. FUSE) file systems,
## forcing this feature to be opt-in (even if it is almost always the better UX).
##
## default: false
#watch = true

#[[collections]]
#name = "lossless"
#directory = "/data/music"
#follow-symlinks = false
#watch = true

[[collections]]
name = "lossy"
directory = "/home/j/music_lossy"
follow-symlinks = false
watch = true

# [library] - behaviors of the full library (combination of all files within all
# collections)
# do not confuse with [[collections]]
[library]
# If enabled, files will be split by their accompanying CUE file, if available.
# Useful if albums are stored as one long file per disc.
#
# default: true
enable-cue-files = true

# This section is all about fixing file tags at the glass (i.e. tags on-disk are
# not modified) in the name of user experience and/or ease of search. It is
# almost always safe to leave these enabled, but if you run into Weird Issues
# (TM), the levers are available (but so is the bug tracker, so please holler!)
#
# Each option is documented with examples, and all options in this section are
# additive. Thus, with all of "ignore-articles=true", "ignore-case=true",
# "ignore-spaces=true", and "ignore-special-characters=true", for grouping and
# sorting purposes, "The Big Bad Band & A Really Cool Friend!" would be parsed
# as "bigbadbandareallycoolfriend". If "A Big Bad Band / The Really Cool Friend"
# exists, it would parse exactly the same ("bigbadbandareallycoolfriend") and be
# considered the same group. Since the former was the longest name discovered,
# it would be presented to clients, representing the entire group.
#
# In general, changes to this section trigger a reparse of the entire library,
# albeit from cache (if possible) rather than source.
[library.grouping]
# Whether to enable the grouping feature at all.
#
# default: true
enabled = true
# If enabled, known articles are removed from the artist tag while grouping.
# "The Dirty Heads" and "Dirty Heads" will be considered the same group.
# Articles do not have to be at the beginning of the string to be matched; "The
# Beatles" and "Beatles The" are considered equivalent. Applies to artists and
# albums, though this almost always only matters for artists. The word list
# barely attempts to be exhaustive of English, let alone other languages;
# patches welcome!
#
# The longest name as discovered will be presented (i.e. "The Dirty Heads" will
# be seen as the artist header, in this example). Given a tie, assume
# non-deterministic behavior, and probably fix your tags.
#
# default: true
ignore-articles = true
# If enabled, "Bullet For My Valentine" and "Bullet for my Valentine" will be
# considered the same group.
#
# The longest name as discovered will be presented, if unique. Given a tie, the
# name with the most uppercase characters, if applicable, will be selected.
# Given a tie, assume non-deterministic behavior, and probably fix your tags.
#
# default: true
ignore-case = true
# If enabled, spaces are removed from artist tags while grouping. This is almost
# certainly not useful on its own, but can be useful when paired with other
# ignore-* options. In standalone form, however, "Purity Ring" will be
# considered equivalent to "PurityRing" and part of the same group.
#
# The longest name as discovered will be presented (i.e. "Purity Ring" will be
# seen as the artist header, in this example). Given a tie, assume
# non-deterministic behavior, and probably fix your tags.
#
# default: true
ignore-spaces = true
# If enabled, known special characters are removed from the artist tag while
# grouping. Each of the following pairs will be considered the same group:
#
# - "ACDC" and "AC/DC"
# - "Panic at the Disco" and "Panic! at the Disco"
# - "Hello - World" and "Hello + World"
#
# The longest name as discovered will be presented (i.e. "AC/DC" will be seen as
# the artist header, in this example). Given a tie, assume non-deterministic
# behavior, and probably fix your tags.
#
# default: true
ignore-special-characters = true
# If enabled, albums with several artists in their tracks' tags will be grouped
# into either their Album Artist tag, if available, or a placeholder `Various
# Artists` value. The latter is used if it seems reasonably likely that the
# tracks are related - the Album and Year tags must match, and the tracks must
# all be part of the same [[collections]] entry.
#
# default: true
group-by-album-artist = true
